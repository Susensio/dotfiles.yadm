#!/bin/bash
set -eu
set -o noglob

function usage(){
  cat << EOF
Usage: $(basename "$0") [-r|--repo] 'author/repo' [-c|--cmd] 'command'

Programs are installed in ${HOME}/.local/lib/\${cmd}/ and symlinked to ${HOME}/.local/bin/\${cmd}

EOF
}

# read --repo and --cmd from command line
SHORT=h,r:,c:
LONG=help,repo:,cmd:
OPTS=$(getopt --options $SHORT --longoptions $LONG -- "$@")
eval set -- "$OPTS"

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h | --help )
      usage
      exit 0
      ;;
    -r | --repo )
      repo="$2"
      shift 2
      ;;
    -c | --cmd )
      cmd="$2"
      shift 2
      ;;
    -- )
      shift;
      break
      ;;
    * )
      echo "Unexpected option: $1"
      exit
      ;;
  esac
done

function get_version(){
  text=$(cat)
  regex='\d+(\.\d+)+'
  version=$(echo "$text" | grep -Po -m1 "v${regex}")
  # Try to find it without `v` and prepend it later...
  if [[ -z "$version" ]]; then
    version=$(echo "$text" | grep -Po -m1 "$regex")
    [[ -n "$version" ]] && version="v${version}"
  fi
  [[ -n "$version" ]] && echo "$version" | head -n1 || return 1
}

latest_version=$(gh --repo "$repo" release view --json 'tagName' | get_version \
  || gh --repo "$repo" release view --json 'body' | get_version)

current_version=$("$cmd" --version 2>/dev/null | get_version || echo "NOT-INSTALLED" )

if [[ "$latest_version" = "$current_version" ]]; then
  echo "Already up to date."
else
  echo "Updating ${cmd} from ${current_version} to ${latest_version}..."

  folder="${HOME}/.local/lib/${cmd}/"
  download="download.tar.gz"
  release="release"

  mkdir -pv "$folder"
  cd "$folder"

  # Save release file if not present
  [[ ! -f 'gh-repo' ]] && echo "$repo" > gh-repo
  echo "Downloading release..."

  if [ $(uname -m) = "x86_64" ]; then
    patterns=(
      "${cmd}*x86_64*inux*gnu*.gz"
      "${cmd}*x86_64*inux*.gz"
      "${cmd}*inux*x86_64*.gz"
      "${cmd}*64*inux*gnu*.gz"
      "${cmd}*64*inux*.gz"
      "${cmd}*inux*64*.gz"
      "*64*inux*.gz"
      "*.gz"
      )
  elif [[ $(uname -m) = armv7* ]]; then
    patterns=(
      "${cmd}*armv7*gnu*.gz"
      "${cmd}*armv7*.gz"
      "${cmd}*arm-*gnu*.gz"
      "${cmd}*arm-*.gz"
      )
  else
    echo "Architecture not recognized" 1>&2 && exit 1
  fi

  downloaded=0
  # Download the first pattern encountered
  for pattern in "${patterns[@]}"; do
    gh --repo "$repo" release download --clobber \
      --pattern "${pattern}" \
      --output "${download}" \
      && downloaded=1 \
      && break
  done
  if [[ $downloaded -eq 1 ]]; then
    echo "Asset found with pattern '${pattern}' and downloaded to '${download}'."
  else
    echo "ERROR: No single asset found" >&2
    exit 1
  fi

  echo "Removing old release..."
  rm -vrf "$release"
  echo "Extracting downloaded file..."
  mkdir -pv "$release" && tar -xzf "$download" -C "$release" --recursive-unlink && echo "Done extracting"

  executable=$(find "${folder}" -type f -executable -name "${cmd}")
  symlink="${HOME}/.local/bin/${cmd}"
  echo "Updating symlink..."
  ln -sfv "$(realpath ${executable})" "${symlink}"

  usermanpages="${XDG_DATA_HOME}/man/man1"
  manpage=$(find "${folder}" -type d -name "man1")
  if [[ -n "${manpage}" ]]; then
    echo "Updating manpages..."
    for file in $(find ${manpage} -type f); do
      ln -svf "${file}" "${usermanpages}/$(basename ${file})"
    done
  fi

  echo "Removing downloaded file..."
  rm -v "${download}"
fi
