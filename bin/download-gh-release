#!/bin/bash
set -eu
# set -o noglob

function usage(){
  cat << EOF
Usage: $(basename "$0") [-r|--repo] 'author/repo' [-c|--cmd] 'command'

Programs are installed in $HOME/.local/lib/\$cmd/ and symlinked to $HOME/.local/bin/\${cmd}

EOF
}

# read --repo and --cmd from command line
SHORT=h,r:,c:
LONG=help,repo:,cmd:
OPTS=$(getopt --options $SHORT --longoptions $LONG -- "$@")
eval set -- "$OPTS"

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h | --help )
      usage
      exit 0
      ;;
    -r | --repo )
      repo="$2"
      shift 2
      ;;
    -c | --cmd )
      cmd="$2"
      shift 2
      ;;
    -- )
      shift;
      break
      ;;
    * )
      echo "Unexpected option: $1" >&2
      exit
      ;;
  esac
done

folder="$HOME/.local/lib/$cmd"
download="download.tar.gz"
release="release"
symlink="$HOME/.local/bin/$cmd"
usermanpages="$XDG_DATA_HOME/man/man1"
fish_completions="$XDG_CONFIG_HOME/fish/completions/vendor"

# Save release file if not present
mkdir -pv "$folder"
[[ ! -f 'gh-repo' ]] && echo "$repo" > "$folder/gh-repo"

function get_version(){
  text=$(cat)
  regex='\d+(\.\d+)+|r\d+'
  version=$(echo "$text" | grep -Po -m1 "v${regex}")
  # Try to find it without `v` and prepend it later...
  if [[ -z "$version" ]]; then
    version=$(echo "$text" | grep -Po -m1 "$regex")
    [[ -n "$version" ]] && version="v${version}"
  fi
  [[ -n "$version" ]] && echo "$version" | head -n1 || return 1
}

echo "Finding latest version..." >&2
latest_version=$(gh --repo "$repo" release view --json 'tagName' | get_version \
  || gh --repo "$repo" release view --json 'body' | get_version)

current_version=$("$cmd" --version 2>/dev/null | get_version || echo "NOT-INSTALLED" )

if [[ "$latest_version" = "$current_version" ]]; then
  echo "Already up to date." >&2
else
  echo "Updating $cmd from $current_version to $latest_version..." >&2

  cd "$folder"

  if [ "$(uname -m)" = "x86_64" ]; then
    patterns=(
      "${cmd}*x86_64*inux*gnu*.gz"
      "${cmd}*x86_64*inux*.gz"
      "${cmd}*inux*x86_64*.gz"
      "${cmd}*64*inux*gnu*.gz"
      "${cmd}*64*inux*.gz"
      "${cmd}*inux*64*.gz"
      "*64*inux*.gz"
      "*.gz"
      )
  elif [[ "$(uname -m)" = armv7* ]]; then
    patterns=(
      "${cmd}*inux*armv[76]*gnu*.gz"
      "${cmd}*inux*armv[76]*.gz"
      "${cmd}*armv[76]*gnu*.gz"
      "${cmd}*arm[\-\.]*gnu*.gz"
      "${cmd}*arm[\-\.]*inux*.gz"
      "${cmd}*inux*arm[\-\.]*.gz"
      "${cmd}*armv[76]*.gz"
      "${cmd}*arm[\-\.]*.gz"
      )
  else
    echo "System architecture not recognized" >&2 && exit 1
  fi

  downloaded=0
  # Download the first pattern encountered
  for pattern in "${patterns[@]}"; do
    gh --repo "$repo" release download --clobber \
      --pattern "$pattern" \
      --output "$download" \
      && downloaded=1 \
      && break
  done

  if [[ $downloaded -eq 0 ]]; then
    echo "ERROR: no release found" >&2 && exit 1
    # echo "Tarball not found, fallback to AppImage" >&2
    # appimage="${cmd}.appimage"
    # gh --repo "$repo" release download --clobber \
    #   --pattern "${appimage}" \
    #   --output "${appimage}" \
    #   || ( echo "ERROR: no release found" >&2 && exit 1 )
    # echo "AppImage downloaded. Updating symlink..." >&2
    # chmod +x "${appimage}"
    # ln -sfv "$(realpath ${appimage})" "${symlink}"
    # echo "${cmd} AppImage installed" >&2
    # exit 0
  fi

  echo "Asset found with pattern '$pattern' and downloaded to '$download'." >&2
  echo "Removing old release..." >&2
  rm -vrf "$release"
  echo "Extracting downloaded file..." >&2
  mkdir -pv "$release" && tar -xzf "$download" -C "$release" --recursive-unlink && echo "Done extracting"

  executable=$(find "$folder" -type f -executable -name "${cmd}")
  echo "Updating symlink..." >&2
  ln -sfv "$(realpath "$executable")" "$symlink"


  shopt -s globstar nullglob
  echo "Updating manpages..." >&2
  for file in **/man1/*; do
    ln -svf "$(realpath "$file")" "$usermanpages/$(basename "$file")"
  done
  # manpage=$(find "$folder" -type d -name "man1")
  # if [[ -n "$manpage" ]]; then
  #   echo "Updating manpages..." >&2
  #   find "$manpage" -type f -exec \
  #     bash -c 'ln -svf "$(realpath "$1")" "$usermanpages/$(basename "$1")"' bash {} \;
  # fi

  echo "Updating fish completion..." >&2
  # should not use a loop, bc only one file is expected
  for file in **/*complet*/**/*.fish; do
    ln -svf "$(realpath "$file")" "$fish_completions/$cmd.fish"
  done

  # completion=$(find "$folder" -type f -path '*complet*.fish')
  # if [[ -n "$completion" ]]; then
  #   echo "Updating fish completion..." >&2
  #   ln -svf "$(realpath "$completion")" "$fish_completions/$cmd.fish"
  # fi
  shopt -u globstar nullglob

  echo "Removing downloaded file..." >&2
  rm -v "$download"

  echo "$cmd Tarball installed" >&2
fi
